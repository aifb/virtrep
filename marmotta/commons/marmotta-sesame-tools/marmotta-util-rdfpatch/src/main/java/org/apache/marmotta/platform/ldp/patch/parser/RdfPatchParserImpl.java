/* Generated By:JavaCC: Do not edit this line. RdfPatchParserImpl.java */
package org.apache.marmotta.platform.ldp.patch.parser;

import org.apache.marmotta.platform.ldp.patch.model.PatchLine;
import org.apache.marmotta.platform.ldp.patch.model.WildcardStatement;
import org.openrdf.model.*;
import org.openrdf.model.impl.ValueFactoryImpl;
import org.openrdf.rio.turtle.TurtleUtil;

import java.io.InputStream;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class RdfPatchParserImpl implements RdfPatchParser, RdfPatchParserImplConstants {

    private HashMap<String, String> namespaces = new HashMap<String, String>();
    private ValueFactory valueFactory = ValueFactoryImpl.getInstance();

    public RdfPatchParserImpl(ValueFactory vf, InputStream is) {
        this(is);
        this.valueFactory = vf;
    }

    public RdfPatchParserImpl(ValueFactory vf, InputStream is, String enc) {
        this(is, enc);
        this.valueFactory = vf;
    }

    @Override
    public void setValueFactory(ValueFactory vf) {
        if (vf == null) throw new IllegalArgumentException("ValueFactory must not be null");
        this.valueFactory = vf;
    }

    @Override
    public ValueFactory getValueFactory() {
        return this.valueFactory;
    }


    private URI createURI(String uri) {
        return this.valueFactory.createURI(unwrapUri(uri));
    }

    private URI createURI(String prefix, String local) {
        return this.valueFactory.createURI(namespaces.get(prefix)+local);
    }

    private URI createURIfromQname(String qname) {
        final String[] split = qname.split(":", 2);
        return createURI(split[0], split[1]);
    }

    private BNode createBNode(String id) {
        return this.valueFactory.createBNode(id);
    }

    private Literal createLiteral(String value, String lang, URI type) throws ParseException {
        try {
            value = TurtleUtil.decodeString(value.substring(1, value.length() - 1));
        } catch (IllegalArgumentException e) {
            throw new ParseException(e.getMessage());
        }
        if (lang != null) {
            return this.valueFactory.createLiteral(value, lang);
        } else if (type != null) {
            return this.valueFactory.createLiteral(value, type);
        } else {
            return this.valueFactory.createLiteral(value);
        }
    }

    private Literal createLongLiteral(String value, String lang, URI type) throws ParseException {
        value = value.substring(2, value.length() - 2);
        return createLiteral(value, lang, type);
    }

    private String unwrapUri(String uri) {
        if (uri.startsWith("<")) {
            uri = uri.substring(1);
        }
        if (uri.endsWith(">")) {
            uri = uri.substring(0, uri.length()-1);
        }
        return uri;
    }

  final public List<PatchLine> parsePatch() throws ParseException {
    Token id, prefix, op;
    Statement statement;
    LinkedList<PatchLine> diff = new LinkedList<PatchLine>();
    namespaces.clear();
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case PREFIX:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(PREFIX);
      id = jj_consume_token(IDENT);
      jj_consume_token(COLON);
      prefix = jj_consume_token(URI);
      jj_consume_token(DOT);
                                                           namespaces.put(id.image, unwrapUri(prefix.image));
    }
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case OP:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      op = jj_consume_token(OP);
      statement = parseStatement();
      jj_consume_token(DOT);
                                                     diff.add(new PatchLine(PatchLine.Operator.fromCommand(op.image), statement));
    }
    jj_consume_token(0);
        {if (true) return diff;}
    throw new Error("Missing return statement in function");
  }

  final private Statement parseStatement() throws ParseException {
    Token t1 = null;
    Token lVal = null, lLang = null;
    Resource subject;
    URI predicate, type = null;
    Value object;
    switch (jj_nt.kind) {
    case URI:
    case QNAME:
      subject = parseURI();
      break;
    case BNODE:
      t1 = jj_consume_token(BNODE);
                       subject = createBNode(t1.image.substring(2));
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
                   subject = null;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case URI:
    case QNAME:
      predicate = parseURI();
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
                   predicate = null;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case URI:
    case QNAME:
      object = parseURI();
      break;
    case BNODE:
      t1 = jj_consume_token(BNODE);
                       object = createBNode(t1.image.substring(2));
      break;
    case STRLIT:
      lVal = jj_consume_token(STRLIT);
      switch (jj_nt.kind) {
      case LANG:
        jj_consume_token(LANG);
        lLang = jj_consume_token(IDENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case TYPE:
        jj_consume_token(TYPE);
        type = parseURI();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
            object = createLiteral(lVal.image, lLang!=null?lLang.image:null, type);
      break;
    case STRLONGLIT:
      lVal = jj_consume_token(STRLONGLIT);
      switch (jj_nt.kind) {
      case LANG:
        jj_consume_token(LANG);
        lLang = jj_consume_token(IDENT);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case TYPE:
        jj_consume_token(TYPE);
        type = parseURI();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
            object = createLongLiteral(lVal.image, lLang!=null?lLang.image:null, type);
      break;
    case REPEAT:
      jj_consume_token(REPEAT);
                   object = null;
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new WildcardStatement(subject, predicate, object);}
    throw new Error("Missing return statement in function");
  }

  final private URI parseURI() throws ParseException {
    Token u;
    switch (jj_nt.kind) {
    case URI:
      u = jj_consume_token(URI);
                {if (true) return createURI(u.image);}
      break;
    case QNAME:
      u = jj_consume_token(QNAME);
                  {if (true) return createURIfromQname(u.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RdfPatchParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x800,0x1c1000,0x141000,0x200000,0x400000,0x200000,0x400000,0x1c1180,0x140000,};
   }

  /** Constructor with InputStream. */
  public RdfPatchParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RdfPatchParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RdfPatchParserImplTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RdfPatchParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RdfPatchParserImplTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RdfPatchParserImpl(RdfPatchParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RdfPatchParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
