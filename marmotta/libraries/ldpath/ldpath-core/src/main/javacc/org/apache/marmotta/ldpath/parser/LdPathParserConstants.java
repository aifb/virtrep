/* Generated By:JavaCC: Do not edit this line. LdPathParserConstants.java */
package org.apache.marmotta.ldpath.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LdPathParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRLIT = 9;
  /** RegularExpression Id. */
  int COMMA = 11;
  /** RegularExpression Id. */
  int SCOLON = 12;
  /** RegularExpression Id. */
  int COLON = 13;
  /** RegularExpression Id. */
  int DCOLON = 14;
  /** RegularExpression Id. */
  int ASSIGN = 15;
  /** RegularExpression Id. */
  int K_PREFIX = 16;
  /** RegularExpression Id. */
  int K_FILTER = 17;
  /** RegularExpression Id. */
  int K_BOOST = 18;
  /** RegularExpression Id. */
  int K_GRAPH = 19;
  /** RegularExpression Id. */
  int SELF = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int P_SEP = 23;
  /** RegularExpression Id. */
  int PLUS = 24;
  /** RegularExpression Id. */
  int STAR = 25;
  /** RegularExpression Id. */
  int NOT = 26;
  /** RegularExpression Id. */
  int INVERSE = 27;
  /** RegularExpression Id. */
  int IS = 28;
  /** RegularExpression Id. */
  int IS_A = 29;
  /** RegularExpression Id. */
  int FUNC = 30;
  /** RegularExpression Id. */
  int TYPE = 31;
  /** RegularExpression Id. */
  int LANG = 32;
  /** RegularExpression Id. */
  int B_RO = 33;
  /** RegularExpression Id. */
  int B_RC = 34;
  /** RegularExpression Id. */
  int B_SO = 35;
  /** RegularExpression Id. */
  int B_SC = 36;
  /** RegularExpression Id. */
  int B_CO = 37;
  /** RegularExpression Id. */
  int B_CC = 38;
  /** RegularExpression Id. */
  int B_XO = 39;
  /** RegularExpression Id. */
  int B_XC = 40;
  /** RegularExpression Id. */
  int URI = 41;
  /** RegularExpression Id. */
  int IDENTIFIER = 42;
  /** RegularExpression Id. */
  int URICHAR = 43;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int WithinString = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "<token of kind 6>",
    "\"*/\"",
    "\"\\\"\"",
    "\"\\\"\"",
    "<token of kind 10>",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"::\"",
    "\"=\"",
    "\"@prefix\"",
    "\"@filter\"",
    "\"@boost\"",
    "\"@graph\"",
    "\".\"",
    "\"&\"",
    "\"|\"",
    "\"/\"",
    "\"+\"",
    "\"*\"",
    "\"!\"",
    "\"^\"",
    "\"is\"",
    "\"is-a\"",
    "\"fn:\"",
    "\"^^\"",
    "\"@\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"<\"",
    "\">\"",
    "<URI>",
    "<IDENTIFIER>",
    "<URICHAR>",
  };

}
