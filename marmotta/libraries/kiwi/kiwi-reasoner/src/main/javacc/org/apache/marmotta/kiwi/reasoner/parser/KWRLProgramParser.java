/* Generated By:JavaCC: Do not edit this line. KWRLProgramParser.java */
package org.apache.marmotta.kiwi.reasoner.parser;

import java.io.Reader;
import java.io.StringReader;
import java.io.InputStream;
import org.openrdf.model.*;
import java.util.*;
import org.apache.marmotta.kiwi.reasoner.model.program.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class KWRLProgramParser extends KWRLProgramParserBase implements KWRLProgramParserConstants {

    public KWRLProgramParser(Reader in, ValueFactory valueFactory) {
        this(in);

        setValueFactory(valueFactory);
    }

    public KWRLProgramParser(ValueFactory valueFactory, String content) {
        this(new StringReader(content));

        setValueFactory(valueFactory);
    }

    public KWRLProgramParser(ValueFactory valueFactory, InputStream in) {
        this(in);

        setValueFactory(valueFactory);
    }

    public KWRLProgramParser(ValueFactory valueFactory, InputStream in, String encoding) {
        this(in, encoding);

         setValueFactory(valueFactory);
    }

//https://javacc.dev.java.net/doc/javaccgrm.html
//	If the label is preceded by a "#", then this regular expression may not be referred to from expansion units, but only from within other regular expressions. When the "#" is present, the regular expression is referred to as a "private regular expression". 
//  If the "#" is omitted, the token manager will erroneously recognize a string like E123 as a legal token of kind EXPONENT (instead of IDENTIFIER in the Java grammar).

// (([a-zA-Z][0-9a-zA-Z+\\-\\.]*:)?/{0,2}[0-9a-zA-Z;/?:@&=+$\\.\\-_!~*'()%]+)? (#[0-9a-zA-Z;/?:@&=+$\\.\\-_!~*'()%]+)?
// http://aspn.activestate.com/ASPN/Mail/Message/xml-dev/754445
  final public Program Program() throws ParseException {
    Program program = new Program();
    int nullNameCount = 0;
    Rule rule;
    Token name = null;
    Token prefix = null;
     Token uri;
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(25);
      prefix = jj_consume_token(IDENTIFIER);
      jj_consume_token(26);
      jj_consume_token(27);
      uri = jj_consume_token(URI);
      jj_consume_token(28);
      if (jj_2_2(2147483647)) {
        jj_consume_token(OR);
      } else {
        ;
      }
        program.addNamespace(prefix.image, uri.image );
        namespaces.put(prefix.image, uri.image);
    }
    label_2:
    while (true) {
      if (jj_2_3(2147483647)) {
        name = jj_consume_token(IDENTIFIER);
        jj_consume_token(26);
      } else {
        ;
      }
      rule = Rule();
    if (name == null) {
        nullNameCount++;
        rule.setName("rule_" + nullNameCount);
    } else {
        rule.setName(name.image);
    }

    program.addRule(rule); name=null; //it's declared above, once set it doesn't get cleared

      if (jj_2_4(2147483647)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(0);
    {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  final public Rule Rule() throws ParseException {
    Pattern head;
    List<Pattern> body;
    Rule rule = new Rule();
    startRule();
    body = Body();
    jj_consume_token(THEN);
    head = HeadTriplePattern();
    if (jj_2_7(2147483647)) {
      if (jj_2_5(2147483647)) {
        jj_consume_token(OR);
      } else if (jj_2_6(2147483647)) {
        jj_consume_token(29);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
        rule.setHead(head);
        rule.setBody(body);
        endRule();
        {if (true) return rule;}
    throw new Error("Missing return statement in function");
  }

  final public List<Pattern> Body() throws ParseException {
    Pattern       pattern, pattern2;
    List<Pattern> body = new LinkedList<Pattern>();
    pattern = BodyTriplePattern();
                                    body.add(pattern);
    label_3:
    while (true) {
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(AND);
      pattern2 = BodyTriplePattern();
                                                                                                body.add(pattern2);
    }
      {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  final public Pattern BodyTriplePattern() throws ParseException {
                               Field subject; Field property; Field object;
    jj_consume_token(LEFTP);
    subject = Subject();
    property = Property();
    object = BodyObject();
    jj_consume_token(RIGHTP);
          {if (true) return new Pattern(subject, property, object);}
    throw new Error("Missing return statement in function");
  }

  final public Pattern HeadTriplePattern() throws ParseException {
                               Field subject; Field property; Field object;
    jj_consume_token(LEFTP);
    subject = HeadSubject();
    property = Property();
    object = HeadObject();
    jj_consume_token(RIGHTP);
          {if (true) return new Pattern(subject, property, object);}
    throw new Error("Missing return statement in function");
  }

  final public Field HeadSubject() throws ParseException {
                        ResourceField uri = null; VariableField variable = null;
    if (jj_2_9(2147483647)) {
      uri = Uri();
    } else if (jj_2_10(2147483647)) {
      variable = Variable();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null) {
                        {if (true) return uri;}
                }

                {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public Field Property() throws ParseException {
                     ResourceField uri = null; VariableField variable = null;
    if (jj_2_11(2147483647)) {
      uri = Uri();
    } else if (jj_2_12(2147483647)) {
      variable = Variable();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public Field HeadObject() throws ParseException {
                       ResourceField uri = null; VariableField variable = null; LiteralField literal = null;
    if (jj_2_13(2147483647)) {
      uri = Uri();
    } else if (jj_2_14(2147483647)) {
      variable = Variable();
    } else if (jj_2_15(2147483647)) {
      literal = Literal();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                if (variable != null)
                        {if (true) return variable;}

                {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public Field Subject() throws ParseException {
                    ResourceField uri = null; VariableField variable = null;
    if (jj_2_16(2147483647)) {
      uri = Uri();
    } else if (jj_2_17(2147483647)) {
      variable = Variable();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                if (variable != null)
                        {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final public Field BodyObject() throws ParseException {
                       ResourceField uri = null; VariableField variable = null; LiteralField literal = null;
    if (jj_2_18(2147483647)) {
      uri = Uri();
    } else if (jj_2_19(2147483647)) {
      variable = Variable();
    } else if (jj_2_20(2147483647)) {
      literal = Literal();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                if (variable != null)
                        {if (true) return variable;}

                {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public ResourceField Uri() throws ParseException {
                        Token uri;
    if (jj_2_21(2147483647)) {
      jj_consume_token(27);
      uri = jj_consume_token(URI);
      jj_consume_token(28);
              {if (true) return getResource(uri.image);}
    } else if (jj_2_22(2147483647)) {
      uri = jj_consume_token(URI);
              log.warn("DEPRECATION: please enclose URIs always in < and >; URI was: {}", uri.image);
              {if (true) return getResource(uri.image);}
    } else if (jj_2_23(2147483647)) {
      uri = jj_consume_token(NS_URI);
              {if (true) return getResourceByNS(uri.image);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VariableField Variable() throws ParseException {
                            Token t;
    t = jj_consume_token(VARIABLE);
      {if (true) return getVariable(t.image);}
    throw new Error("Missing return statement in function");
  }

//TODO language tags
  final public LiteralField Literal() throws ParseException {
                          Token literal = null; Token type = null;
    if (jj_2_25(2147483647)) {
      literal = jj_consume_token(STRLIT);
      if (jj_2_24(2147483647)) {
        jj_consume_token(TYPE);
        type = jj_consume_token(URI);
      } else {
        ;
      }
    } else if (jj_2_26(2147483647)) {
      jj_consume_token(30);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   //have to remove the leading " character first
        if (type != null) {
            {if (true) return new LiteralField(resolveLiteral(literal.image.substring(1, literal.image.length()-1), Locale.getDefault(), type.image));}
        }

        {if (true) return new LiteralField(resolveLiteral(literal.image.substring(1, literal.image.length()-1), Locale.getDefault(), null));}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3_11() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(STRLIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(LEFTP)) return true;
    if (jj_3R_14()) return true;
    if (jj_3R_12()) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RIGHTP)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(NS_URI)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(URI)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(LEFTP)) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RIGHTP)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(URI)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_5()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(URI)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(URI)) return true;
    if (jj_scan_token(28)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public KWRLProgramParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public KWRLProgramParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public KWRLProgramParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KWRLProgramParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public KWRLProgramParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KWRLProgramParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public KWRLProgramParser(KWRLProgramParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(KWRLProgramParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
